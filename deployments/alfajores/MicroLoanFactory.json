{
  "address": "0x04d7478fDF318C3C22cECE62Da9D78ff94807D77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestModule",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "elapsedTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "changeToCredit",
          "type": "int256"
        }
      ],
      "name": "LoanFullyPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outstandingLoanAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanPaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "creditScore",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "LoanRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "creditId",
          "type": "uint256"
        }
      ],
      "name": "claimCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditScores",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAmountOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestModule",
      "outputs": [
        {
          "internalType": "contract InterestModuleLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanStructures.LoanPurpose",
          "name": "purpose",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LoanStructures.LoanPurpose",
          "name": "purpose",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "requestLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requestsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestsById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFilled",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "creditScore",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanStructures.LoanPurpose",
          "name": "purpose",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setCreditToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4396e0d8e5dec70dca9d89c258b1536d9c7927e1a53570c694fe3ab2f20410d7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x04d7478fDF318C3C22cECE62Da9D78ff94807D77",
    "transactionIndex": 0,
    "gasUsed": "3110517",
    "logsBloom": "0x
    "blockHash": "0xd8f2b6ba5766f664c669a040e6b02bc47721db802bfaca92b9e30a5e032b1959",
    "transactionHash": "0x4396e0d8e5dec70dca9d89c258b1536d9c7927e1a53570c694fe3ab2f20410d7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12119079,
        "transactionHash": "0x4396e0d8e5dec70dca9d89c258b1536d9c7927e1a53570c694fe3ab2f20410d7",
        "address": "0x04d7478fDF318C3C22cECE62Da9D78ff94807D77",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd8f2b6ba5766f664c669a040e6b02bc47721db802bfaca92b9e30a5e032b1959"
      }
    ],
    "blockNumber": 12119079,
    "cumulativeGasUsed": "3110517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1",
    "0xc075BC0f734EFE6ceD866324fc2A9DBe1065CBB1"
  ],
  "numDeployments": 4,
  "solcInputHash": "f31cc814f4fcc22d4e890ccb29fd47c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestModule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"elapsedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"changeToCredit\",\"type\":\"int256\"}],\"name\":\"LoanFullyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingLoanAmount\",\"type\":\"uint256\"}],\"name\":\"LoanPaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"creditScore\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LoanRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creditId\",\"type\":\"uint256\"}],\"name\":\"claimCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditScores\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAmountOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestModule\",\"outputs\":[{\"internalType\":\"contract InterestModuleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanStructures.LoanPurpose\",\"name\":\"purpose\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LoanStructures.LoanPurpose\",\"name\":\"purpose\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFilled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"creditScore\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanStructures.LoanPurpose\",\"name\":\"purpose\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setCreditToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Borrowers/MicroLoanFactory.sol\":\"MicroLoanFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/Borrowers/ERC721Credit.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../Structures/CreditorStructures.sol\\\";\\n\\ncontract ERC721Credit is ERC721, CreditorStructures {\\n    mapping(uint256 => Credit) creditData; // Maps tokenIds to credit structure\\n    address minter;\\n    uint256 linesOfCredit;\\n\\n    constructor(address _minter) ERC721(\\\"Credit Receipts\\\", \\\"CRED\\\") {\\n        minter = _minter;\\n        linesOfCredit = 0;\\n    }\\n\\n    modifier only_minter() {\\n        require(msg.sender == minter, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    function getCreditInfo(uint256 tokenId)\\n        external\\n        view\\n        returns (Credit memory credit, address owner)\\n    {\\n        require(_exists(tokenId), \\\"Line of credit does not exist\\\");\\n        credit = creditData[tokenId];\\n        owner = ownerOf(tokenId);\\n    }\\n\\n    function setAmountClaimed(uint256 tokenId, uint256 amountClaimed)\\n        external\\n        only_minter\\n    {\\n        require(_exists(tokenId), \\\"Line of credit does not exist\\\");\\n        Credit storage credit = creditData[tokenId];\\n        credit.amountClaimed = amountClaimed;\\n    }\\n\\n    function mint(CreditorStructures.CreditMintParams calldata params)\\n        external\\n        only_minter\\n        returns (uint256)\\n    {\\n        Credit storage credit = creditData[linesOfCredit];\\n        credit.amountSupplied = params.amountSupplied;\\n        credit.loanId = params.loanId;\\n        credit.trancheNumber = params.trancheNumber;\\n        _mint(params.creditor, linesOfCredit);\\n        return linesOfCredit++;\\n    }\\n\\n    function burn(uint256 tokenId) external only_minter {\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x3b2b0fb72ac39fa063ec0f286345818627e2bb7cbd737bdd08ce8ca58da52a21\",\"license\":\"ISC\"},\"src/Borrowers/IERC721Credit.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../Structures/CreditorStructures.sol\\\";\\n\\ninterface IERC721Credit is IERC721, CreditorStructures {\\n    function getCreditInfo(uint256 tokenId)\\n        external\\n        view\\n        returns (Credit memory credit, address owner);\\n\\n    function mint(CreditorStructures.CreditMintParams calldata params)\\n        external\\n        returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setAmountClaimed(uint256 tokenId, uint256 amountClaimed) external;\\n}\\n\",\"keccak256\":\"0x28358b7ca8ee665af9dc17abceaaf08c44bc5934b3feaa32185020b52b98c112\",\"license\":\"ISC\"},\"src/Borrowers/MicroLoanFactory.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC721Credit.sol\\\";\\nimport \\\"../Structures/CreditorStructures.sol\\\";\\nimport \\\"../Structures/LoanStructures.sol\\\";\\nimport \\\"../Structures/MicroLoanEvents.sol\\\";\\nimport \\\"./ERC721Credit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface InterestModuleLike {\\n    function incDebt(uint256 loan, uint256 currencyAmount) external;\\n\\n    function decDebt(uint256 loan, uint256 currencyAmount) external;\\n\\n    function debt(uint256 loan) external view returns (uint256);\\n\\n    function rateDebt(uint256 rate) external view returns (uint256);\\n\\n    function setRate(uint256 loan, uint256 rate) external;\\n\\n    function changeRate(uint256 loan, uint256 newRate) external;\\n\\n    function accrue(uint256 loan) external;\\n\\n    function newLoan(\\n        uint256 loan,\\n        uint256 ratePerSecond,\\n        uint256 fixedRate\\n    ) external;\\n}\\n\\ncontract MicroLoanFactory is LoanStructures, MicroLoanEvents, Ownable {\\n    mapping(uint256 => Loan) public loans;\\n    mapping(uint256 => LoanRequest) public requestsById;\\n    mapping(address => uint256) public requestsByAddress;\\n    mapping(address => int256) public creditScores;\\n    uint256 public interestRate = 10**9; // 10% interest rate\\n    address public settlementToken;\\n    address public creditToken;\\n    uint256 public IDs;\\n    InterestModuleLike public interestModule;\\n\\n    constructor(address token, address _interestModule) Ownable() {\\n        settlementToken = token;\\n        IDs = 1;\\n        interestModule = InterestModuleLike(_interestModule);\\n        ERC721Credit credit = new ERC721Credit(address(this));\\n        creditToken = address(credit);\\n    }\\n\\n    modifier loanExists(uint256 id) {\\n        require(loans[id].start > 0, \\\"Loan does not exist\\\");\\n        _;\\n    }\\n\\n    modifier requestExists(uint256 id) {\\n        require(requestsById[id].amount > 0, \\\"Request does not exist\\\");\\n        _;\\n    }\\n\\n    function setCreditToken(address token) external onlyOwner {\\n        creditToken = token;\\n    }\\n\\n    function getAmountOwed(uint256 id) public view returns (uint256) {\\n        if (loans[id].closed || loans[id].id == 0) {\\n            return 0;\\n        }\\n\\n        return interestModule.debt(id);\\n    }\\n\\n    function requestLoan(\\n        LoanPurpose purpose,\\n        uint256 amount,\\n        uint256 duration\\n    ) external {\\n        LoanRequest storage request = requestsById[IDs];\\n        request.amount = amount;\\n        request.borrower = msg.sender;\\n        request.creditScore = creditScores[msg.sender];\\n        request.purpose = purpose;\\n        request.duration = duration;\\n\\n        requestsByAddress[msg.sender] = IDs;\\n        emit LoanRequested(\\n            IDs,\\n            msg.sender,\\n            creditScores[msg.sender],\\n            block.timestamp,\\n            amount,\\n            interestRate\\n        );\\n        IDs++;\\n    }\\n\\n    function _fulfillLoan(uint256 id) internal requestExists(id) {\\n        LoanRequest storage request = requestsById[id];\\n        require(\\n            loans[requestsByAddress[request.borrower]].start == 0 &&\\n                loans[id].start == 0,\\n            \\\"User has an outstanding loan\\\"\\n        );\\n        Loan storage loan = loans[id];\\n        loan.start = block.timestamp;\\n        loan.deadline = block.timestamp + request.duration;\\n        loan.id = id;\\n        loan.borrower = request.borrower;\\n        loan.purpose = request.purpose;\\n        loan.amount = request.amount;\\n        interestModule.newLoan(id, interestRate, interestRate);\\n\\n        IERC20(settlementToken).transfer(request.borrower, request.amount);\\n        emit LoanFulfilled(\\n            id,\\n            block.timestamp,\\n            request.borrower,\\n            request.amount\\n        );\\n    }\\n\\n    function contribute(\\n        uint256 id,\\n        uint256 tranche,\\n        uint256 amount\\n    ) external {\\n        LoanRequest storage request = requestsById[id];\\n        uint256 amountToFill = request.amount - request.amountFilled;\\n        uint256 fillAmount = amount > amountToFill ? amountToFill : amount;\\n        require(\\n            IERC20(settlementToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                fillAmount\\n            )\\n        );\\n        request.amountFilled -= fillAmount;\\n        if (request.amountFilled == request.amount) {\\n            _fulfillLoan(id);\\n        }\\n        IERC721Credit(creditToken).mint(\\n            CreditorStructures.CreditMintParams({\\n                loanId: id,\\n                trancheNumber: tranche,\\n                amountSupplied: fillAmount,\\n                creditor: msg.sender\\n            })\\n        );\\n    }\\n\\n    function calculateInterest(uint256 id) internal view returns (uint256) {\\n        return interestModule.debt(id);\\n    }\\n\\n    function closeLoan(uint256 id) internal {\\n        Loan storage loan = loans[id];\\n        loan.closed = true;\\n        uint256 elapsedTime = block.timestamp - loan.start;\\n        int256 creditChange = int256(block.timestamp) - int256(loan.start);\\n        creditScores[loan.borrower] =\\n            creditScores[loan.borrower] +\\n            creditChange;\\n        emit LoanFullyPaid(\\n            id,\\n            block.timestamp,\\n            loan.borrower,\\n            loan.amount,\\n            elapsedTime,\\n            creditChange\\n        );\\n    }\\n\\n    function repayLoan(uint256 id, uint256 amount) external {\\n        Loan storage loan = loans[id];\\n        interestModule.accrue(id);\\n        uint256 totalOwed = interestModule.debt(id);\\n        uint256 amountPaid = amount > totalOwed ? totalOwed : amount;\\n        loan.totalPaid += amountPaid;\\n        require(\\n            IERC20(settlementToken).transferFrom(\\n                loan.borrower,\\n                address(this),\\n                amountPaid\\n            )\\n        );\\n        interestModule.decDebt(id, amountPaid);\\n        if (amountPaid == totalOwed) {\\n            closeLoan(id);\\n        }\\n        emit LoanPaymentMade(\\n            id,\\n            block.timestamp,\\n            loan.borrower,\\n            amountPaid,\\n            totalOwed - amountPaid\\n        );\\n    }\\n\\n    function claimCredit(uint256 creditId) external returns (uint256) {\\n        (\\n            CreditorStructures.Credit memory credit,\\n            address owner\\n        ) = IERC721Credit(creditToken).getCreditInfo(creditId);\\n        Loan storage loan = loans[credit.loanId];\\n        uint256 effectiveAmount = loan.totalPaid - credit.lastClaimedAt;\\n        uint256 entitledTo = (credit.amountSupplied * effectiveAmount) /\\n            loan.amount;\\n\\n        credit.lastClaimedAt = loan.totalPaid;\\n        IERC721Credit(creditToken).setAmountClaimed(creditId, entitledTo);\\n        IERC20(settlementToken).transfer(owner, entitledTo);\\n        return entitledTo;\\n    }\\n}\\n\",\"keccak256\":\"0xa240ed87e4cd5521cb2372770801b8e5e5af6ae9491441178893d509119603ec\",\"license\":\"ISC\"},\"src/Structures/CreditorStructures.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface CreditorStructures {\\n    struct Credit {\\n        uint256 loanId; // id of loan associated with\\n        uint256 trancheNumber;\\n        uint256 amountSupplied;\\n        uint256 amountClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    struct CreditMintParams {\\n        uint256 loanId;\\n        uint256 trancheNumber;\\n        uint256 amountSupplied;\\n        address creditor;\\n    }\\n}\\n\",\"keccak256\":\"0x8f706cc0a1ee6fca8d511f279d1cd02ede0d8d3cb41c7edc25b85715c6453d0c\",\"license\":\"ISC\"},\"src/Structures/LoanStructures.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n// license: MIT\\n\\npragma solidity ^0.8.13;\\n\\ncontract LoanStructures {\\n    uint256 public constant PERCENT_DENOMINATOR = 10**10;\\n\\n    struct OutstandingLoan {\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    enum LoanPurpose {\\n        FOOD,\\n        WATER,\\n        HEALTH,\\n        SCHOOL,\\n        BILLS,\\n        TRANSPORT,\\n        OTHER\\n    }\\n\\n    struct Tranche {\\n        uint256 percent;\\n        uint256 weight;\\n    }\\n\\n    struct Loan {\\n        uint256 start;\\n        uint256 deadline;\\n        uint256 id;\\n        address borrower;\\n        uint256 totalPaid;\\n        LoanPurpose purpose;\\n        bool closed;\\n        uint256 amount;\\n    }\\n\\n    struct LoanRequest {\\n        uint256 amount;\\n        uint256 amountFilled;\\n        address borrower;\\n        int256 creditScore;\\n        uint256 duration;\\n        LoanPurpose purpose;\\n    }\\n}\\n\",\"keccak256\":\"0x24a89e9b9c76e8ccf6a1c25d844407351966db9220d82e4ef58339d24f45d28d\",\"license\":\"ISC\"},\"src/Structures/MicroLoanEvents.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface MicroLoanEvents {\\n    event LoanRequested(\\n        uint256 indexed id,\\n        address indexed requestor,\\n        int256 indexed creditScore,\\n        uint256 timestamp,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event LoanFulfilled(\\n        uint256 indexed id,\\n        uint256 time,\\n        address indexed borrower,\\n        uint256 amount\\n    );\\n    event LoanPaymentMade(\\n        uint256 indexed id,\\n        uint256 time,\\n        address indexed borrower,\\n        uint256 indexed amountPaid,\\n        uint256 outstandingLoanAmount\\n    );\\n    event LoanFullyPaid(\\n        uint256 indexed id,\\n        uint256 time,\\n        address indexed borrower,\\n        uint256 amountBorrowed,\\n        uint256 elapsedTime,\\n        int256 changeToCredit\\n    );\\n}\\n\",\"keccak256\":\"0x6aeac8743b07df649cf25f8d751de0892cb4619a86710f6101baa3a299f2445d\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x6080604052633b9aca006005553480156200001957600080fd5b50604051620036ea380380620036ea8339810160408190526200003c9162000162565b6200004733620000e7565b600680546001600160a01b038085166001600160a01b0319928316179092556001600855600980549284169290911691909117905560405160009030906200008f9062000137565b6001600160a01b039091168152602001604051809103906000f080158015620000bc573d6000803e3d6000fd5b50600780546001600160a01b0319166001600160a01b0392909216919091179055506200019a915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611db3806200193783390190565b80516001600160a01b03811681146200015d57600080fd5b919050565b600080604083850312156200017657600080fd5b620001818362000145565b9150620001916020840162000145565b90509250929050565b61178d80620001aa6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063899e5d85116100cd578063d139d9b911610081578063dc8de29b11610066578063dc8de29b146102f6578063e1ec3c6814610309578063f2fde38b1461037e57600080fd5b8063d139d9b91461027f578063d8e1feed1461029257600080fd5b80638da5cb5b116100b25780638da5cb5b146102595780639e6c29591461026a5780639f9090c51461027657600080fd5b8063899e5d85146102335780638a700b531461024657600080fd5b80637b185e2c116101245780637c3a00fd116101095780637c3a00fd146101f75780637d98adaf1461020057806380bb72731461021357600080fd5b80637b185e2c146101b65780637b9e618d146101e457600080fd5b806349a1e058146101565780635b91e8c31461016b5780636a134bd91461019b578063715018a6146101ae575b600080fd5b610169610164366004611288565b610391565b005b60095461017e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101696101a93660046112d6565b6104ae565b610169610547565b6101d66101c43660046112d6565b60036020526000908152604090205481565b604051908152602001610192565b60065461017e906001600160a01b031681565b6101d660055481565b61016961020e3660046112fa565b6105ad565b6101d66102213660046112d6565b60046020526000908152604090205481565b60075461017e906001600160a01b031681565b610169610254366004611326565b610777565b6000546001600160a01b031661017e565b6101d66402540be40081565b6101d660085481565b6101d661028d366004611348565b610a41565b6102e46102a0366004611348565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401549294936001600160a01b039092169290919060ff1686565b604051610192969594939291906113cb565b6101d6610304366004611348565b610b0e565b61036a610317366004611348565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492936001600160a01b0390921692909160ff808316926101009004169088565b60405161019298979695949392919061140f565b61016961038c3660046112d6565b610d13565b600854600090815260026020818152604080842086815592830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155845260049091529091205460038201556005810180548591907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600681111561042557610425611361565b02179055506004818101839055600854336000818152600360209081526040808320859055948152908490205460055485514281529283018990528286015293519192917f9ebec8734c75cc5f2ec46c70bc402f27ca2207d67af71b34a78ed9d211a055889181900360600190a4600880549060006104a38361148e565b919050555050505050565b6000546001600160a01b0316331461050d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610504565b6105ab6000610df5565b565b6000838152600260205260408120600181015481549192916105cf91906114c6565b905060008184116105e057836105e2565b815b6006546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610653573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067791906114dd565b61068057600080fd5b8083600101600082825461069491906114c6565b909155505082546001840154036106ae576106ae86610e5d565b6007546040805160808101825288815260208101888152818301858152336060840190815293517f9a3e4eb8000000000000000000000000000000000000000000000000000000008152925160048401529051602483015251604482015290516001600160a01b03908116606483015290911690639a3e4eb8906084016020604051808303816000875af115801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906114ff565b50505050505050565b6000828152600160205260409081902060095491517f744f4cf60000000000000000000000000000000000000000000000000000000081526004810185905290916001600160a01b03169063744f4cf690602401600060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b50506009546040517f1e0029c800000000000000000000000000000000000000000000000000000000815260048101879052600093506001600160a01b039091169150631e0029c890602401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088691906114ff565b905060008184116108975783610899565b815b9050808360040160008282546108af9190611518565b909155505060065460038401546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018490529116906323b872dd906064016020604051808303816000875af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e91906114dd565b61095757600080fd5b6009546040517f2047a26700000000000000000000000000000000000000000000000000000000815260048101879052602481018390526001600160a01b0390911690632047a26790604401600060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b505050508181036109e5576109e58561118e565b600383015481906001600160a01b0316867fa5429926614dc1f98f159430591aa6b73ddbcbfc1431ec98a7efe706b936747942610a2285886114c6565b6040805192835260208301919091520160405180910390a45050505050565b600081815260016020526040812060050154610100900460ff1680610a755750600082815260016020526040902060020154155b15610a8257506000919050565b6009546040517f1e0029c8000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690631e0029c890602401602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0891906114ff565b92915050565b6007546040517f7c37722300000000000000000000000000000000000000000000000000000000815260048101839052600091829182916001600160a01b031690637c3772239060240160c060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190611540565b8151600090815260016020526040812060808401516004820154949650929450929091610bc5916114c6565b905060008260060154828660400151610bde91906115f7565b610be89190611634565b60048085015460808801526007546040517f7ff241ce0000000000000000000000000000000000000000000000000000000081529293506001600160a01b031691637ff241ce91610c46918b91869101918252602082015260400190565b600060405180830381600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b50506006546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af1158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906114dd565b509695505050505050565b6000546001600160a01b03163314610d6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610504565b6001600160a01b038116610de95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610504565b610df281610df5565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600260205260409020548190610eba5760405162461bcd60e51b815260206004820152601660248201527f5265717565737420646f6573206e6f74206578697374000000000000000000006044820152606401610504565b6000828152600260208181526040808420928301546001600160a01b0316845260038252808420548452600190915290912054158015610f065750600083815260016020526040902054155b610f525760405162461bcd60e51b815260206004820152601c60248201527f557365722068617320616e206f75747374616e64696e67206c6f616e000000006044820152606401610504565b6000838152600160205260409020428082556004830154610f7291611518565b60018083019190915560028083018690558301546003830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055600580840154908301805460ff9092169290917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169083600681111561100757611007611361565b0217905550815460068201556009546005546040517f1ec9f27b000000000000000000000000000000000000000000000000000000008152600481018790526024810182905260448101919091526001600160a01b0390911690631ec9f27b90606401600060405180830381600087803b15801561108457600080fd5b505af1158015611098573d6000803e3d6000fd5b5050600654600285015485546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101919091529116925063a9059cbb91506044016020604051808303816000875af115801561110f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113391906114dd565b50600282015482546040516001600160a01b039092169186917f2b1eb56f9d2886ace1dfc4a1acf6a640b828f3782247397ebf22f6cf09665b7e9161118091428252602082015260400190565b60405180910390a350505050565b60008181526001602052604081206005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905580549091906111d990426114c6565b82549091506000906111eb904261166f565b60038401546001600160a01b03166000908152600460205260409020549091506112169082906116e3565b6003840180546001600160a01b03908116600090815260046020908152604091829020949094559154600687015483514281529485015291830185905260608301849052169085907f5751530710eb6f83af18f5aba63d1721745fa34ea155523a93b06d58aadc3ceb90608001611180565b60008060006060848603121561129d57600080fd5b8335600781106112ac57600080fd5b95602085013595506040909401359392505050565b6001600160a01b0381168114610df257600080fd5b6000602082840312156112e857600080fd5b81356112f3816112c1565b9392505050565b60008060006060848603121561130f57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561133957600080fd5b50508035926020909101359150565b60006020828403121561135a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600781106113c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060c0820190508782528660208301526001600160a01b038616604083015284606083015283608083015261140460a0830184611390565b979650505050505050565b6000610100820190508982528860208301528760408301526001600160a01b038716606083015285608083015261144960a0830186611390565b92151560c082015260e001529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114bf576114bf61145f565b5060010190565b6000828210156114d8576114d861145f565b500390565b6000602082840312156114ef57600080fd5b815180151581146112f357600080fd5b60006020828403121561151157600080fd5b5051919050565b6000821982111561152b5761152b61145f565b500190565b805161153b816112c1565b919050565b60008082840360c081121561155457600080fd5b60a081121561156257600080fd5b5060405160a0810181811067ffffffffffffffff821117156115ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508351815260208401516020820152604084015160408201526060840151606082015260808401516080820152809250506115ee60a08401611530565b90509250929050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561162f5761162f61145f565b500290565b60008261166a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156116a9576116a961145f565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156116dd576116dd61145f565b50500390565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561171d5761171d61145f565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156117515761175161145f565b5050019056fea26469706673582212207cdb4527a9dd2abbf947e3c822e42137474cf77e4ab98aab04179e2fc3d91f2d64736f6c634300080d003360806040523480156200001157600080fd5b5060405162001db338038062001db3833981016040819052620000349162000172565b604080518082018252600f81526e43726564697420526563656970747360881b60208083019182528351808501909452600484526310d4915160e21b9084015281519192916200008791600091620000cc565b5080516200009d906001906020840190620000cc565b5050600780546001600160a01b0319166001600160a01b039390931692909217909155506000600855620001e0565b828054620000da90620001a4565b90600052602060002090601f016020900481019282620000fe576000855562000149565b82601f106200011957805160ff191683800117855562000149565b8280016001018555821562000149579182015b82811115620001495782518255916020019190600101906200012c565b50620001579291506200015b565b5090565b5b808211156200015757600081556001016200015c565b6000602082840312156200018557600080fd5b81516001600160a01b03811681146200019d57600080fd5b9392505050565b600181811c90821680620001b957607f821691505b602082108103620001da57634e487b7160e01b600052602260045260246000fd5b50919050565b611bc380620001f06000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806370a08231116100b25780639a3e4eb811610081578063b88d4fde11610066578063b88d4fde146102a8578063c87b56dd146102bb578063e985e9c5146102ce57600080fd5b80639a3e4eb814610282578063a22cb4651461029557600080fd5b806370a08231146101e95780637c3772231461020a5780637ff241ce1461026757806395d89b411461027a57600080fd5b806323b872dd116100ee57806323b872dd1461019d57806342842e0e146101b057806342966c68146101c35780636352211e146101d657600080fd5b806301ffc9a71461012057806306fdde0314610148578063081812fc1461015d578063095ea7b314610188575b600080fd5b61013361012e3660046116af565b61030a565b60405190151581526020015b60405180910390f35b6101506103ef565b60405161013f9190611724565b61017061016b366004611737565b610481565b6040516001600160a01b03909116815260200161013f565b61019b610196366004611767565b61052c565b005b61019b6101ab366004611791565b61065d565b61019b6101be366004611791565b6106e4565b61019b6101d1366004611737565b6106ff565b6101706101e4366004611737565b610765565b6101fc6101f73660046117cd565b6107f0565b60405190815260200161013f565b61021d610218366004611737565b61088a565b604080518351815260208085015190820152838201519181019190915260608084015190820152608092830151928101929092526001600160a01b031660a082015260c00161013f565b61019b6102753660046117e8565b610982565b610150610a55565b6101fc61029036600461180a565b610a64565b61019b6102a3366004611822565b610b23565b61019b6102b636600461188d565b610b32565b6101506102c9366004611737565b610bc0565b6101336102dc366004611969565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061039d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806103e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546103fe9061199c565b80601f016020809104026020016040519081016040528092919081815260200182805461042a9061199c565b80156104775780601f1061044c57610100808354040283529160200191610477565b820191906000526020600020905b81548152906001019060200180831161045a57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166105105760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061053782610765565b9050806001600160a01b0316836001600160a01b0316036105c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610507565b336001600160a01b03821614806105dc57506105dc81336102dc565b61064e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610507565b6106588383610cb6565b505050565b6106673382610d3c565b6106d95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610507565b610658838383610e44565b61065883838360405180602001604052806000815250610b32565b6007546001600160a01b031633146107595760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152606401610507565b61076281611029565b50565b6000818152600260205260408120546001600160a01b0316806103e95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610507565b60006001600160a01b03821661086e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610507565b506001600160a01b031660009081526003602052604090205490565b6108bc6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000828152600260205260408120546001600160a01b03166109205760405162461bcd60e51b815260206004820152601d60248201527f4c696e65206f662063726564697420646f6573206e6f742065786973740000006044820152606401610507565b600660008481526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050915061097b83610765565b9050915091565b6007546001600160a01b031633146109dc5760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152606401610507565b6000828152600260205260409020546001600160a01b0316610a405760405162461bcd60e51b815260206004820152601d60248201527f4c696e65206f662063726564697420646f6573206e6f742065786973740000006044820152606401610507565b60009182526006602052604090912060030155565b6060600180546103fe9061199c565b6007546000906001600160a01b03163314610ac15760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152606401610507565b600854600090815260066020908152604091829020918401356002830155833582558301356001820155610b06610afe60808501606086016117cd565b6008546110dc565b60088054906000610b1683611a18565b919050559150505b919050565b610b2e338383611236565b5050565b610b3c3383610d3c565b610bae5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610507565b610bba84848484611322565b50505050565b6000818152600260205260409020546060906001600160a01b0316610c4d5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610507565b6000610c6460408051602081019091526000815290565b90506000815111610c845760405180602001604052806000815250610caf565b80610c8e846113ab565b604051602001610c9f929190611a50565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190610d0382610765565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610dc65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610507565b6000610dd183610765565b9050806001600160a01b0316846001600160a01b03161480610e1857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610e3c5750836001600160a01b0316610e3184610481565b6001600160a01b0316145b949350505050565b826001600160a01b0316610e5782610765565b6001600160a01b031614610ed35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610507565b6001600160a01b038216610f4e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610507565b610f59600082610cb6565b6001600160a01b0383166000908152600360205260408120805460019290610f82908490611a7f565b90915550506001600160a01b0382166000908152600360205260408120805460019290610fb0908490611a96565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061103482610765565b9050611041600083610cb6565b6001600160a01b038116600090815260036020526040812080546001929061106a908490611a7f565b909155505060008281526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166111325760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610507565b6000818152600260205260409020546001600160a01b0316156111975760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610507565b6001600160a01b03821660009081526003602052604081208054600192906111c0908490611a96565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b0316036112975760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610507565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61132d848484610e44565b611339848484846114e0565b610bba5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610507565b6060816000036113ee57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611418578061140281611a18565b91506114119050600a83611add565b91506113f2565b60008167ffffffffffffffff8111156114335761143361185e565b6040519080825280601f01601f19166020018201604052801561145d576020820181803683370190505b5090505b8415610e3c57611472600183611a7f565b915061147f600a86611af1565b61148a906030611a96565b60f81b81838151811061149f5761149f611b05565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506114d9600a86611add565b9450611461565b60006001600160a01b0384163b15611676576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061153d903390899088908890600401611b34565b6020604051808303816000875af1925050508015611578575060408051601f3d908101601f1916820190925261157591810190611b70565b60015b61162b573d8080156115a6576040519150601f19603f3d011682016040523d82523d6000602084013e6115ab565b606091505b5080516000036116235760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610507565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610e3c565b506001949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461076257600080fd5b6000602082840312156116c157600080fd5b8135610caf81611681565b60005b838110156116e75781810151838201526020016116cf565b83811115610bba5750506000910152565b600081518084526117108160208601602086016116cc565b601f01601f19169290920160200192915050565b602081526000610caf60208301846116f8565b60006020828403121561174957600080fd5b5035919050565b80356001600160a01b0381168114610b1e57600080fd5b6000806040838503121561177a57600080fd5b61178383611750565b946020939093013593505050565b6000806000606084860312156117a657600080fd5b6117af84611750565b92506117bd60208501611750565b9150604084013590509250925092565b6000602082840312156117df57600080fd5b610caf82611750565b600080604083850312156117fb57600080fd5b50508035926020909101359150565b60006080828403121561181c57600080fd5b50919050565b6000806040838503121561183557600080fd5b61183e83611750565b91506020830135801515811461185357600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156118a357600080fd5b6118ac85611750565b93506118ba60208601611750565b925060408501359150606085013567ffffffffffffffff808211156118de57600080fd5b818701915087601f8301126118f257600080fd5b8135818111156119045761190461185e565b604051601f8201601f19908116603f0116810190838211818310171561192c5761192c61185e565b816040528281528a602084870101111561194557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561197c57600080fd5b61198583611750565b915061199360208401611750565b90509250929050565b600181811c908216806119b057607f821691505b60208210810361181c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a4957611a496119e9565b5060010190565b60008351611a628184602088016116cc565b835190830190611a768183602088016116cc565b01949350505050565b600082821015611a9157611a916119e9565b500390565b60008219821115611aa957611aa96119e9565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611aec57611aec611aae565b500490565b600082611b0057611b00611aae565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152611b6660808301846116f8565b9695505050505050565b600060208284031215611b8257600080fd5b8151610caf8161168156fea2646970667358221220689bd433d4ce5b56f13fbde9fd5b6dbab93548b29ad73079691cc3e32be4bd9264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063899e5d85116100cd578063d139d9b911610081578063dc8de29b11610066578063dc8de29b146102f6578063e1ec3c6814610309578063f2fde38b1461037e57600080fd5b8063d139d9b91461027f578063d8e1feed1461029257600080fd5b80638da5cb5b116100b25780638da5cb5b146102595780639e6c29591461026a5780639f9090c51461027657600080fd5b8063899e5d85146102335780638a700b531461024657600080fd5b80637b185e2c116101245780637c3a00fd116101095780637c3a00fd146101f75780637d98adaf1461020057806380bb72731461021357600080fd5b80637b185e2c146101b65780637b9e618d146101e457600080fd5b806349a1e058146101565780635b91e8c31461016b5780636a134bd91461019b578063715018a6146101ae575b600080fd5b610169610164366004611288565b610391565b005b60095461017e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101696101a93660046112d6565b6104ae565b610169610547565b6101d66101c43660046112d6565b60036020526000908152604090205481565b604051908152602001610192565b60065461017e906001600160a01b031681565b6101d660055481565b61016961020e3660046112fa565b6105ad565b6101d66102213660046112d6565b60046020526000908152604090205481565b60075461017e906001600160a01b031681565b610169610254366004611326565b610777565b6000546001600160a01b031661017e565b6101d66402540be40081565b6101d660085481565b6101d661028d366004611348565b610a41565b6102e46102a0366004611348565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401549294936001600160a01b039092169290919060ff1686565b604051610192969594939291906113cb565b6101d6610304366004611348565b610b0e565b61036a610317366004611348565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492936001600160a01b0390921692909160ff808316926101009004169088565b60405161019298979695949392919061140f565b61016961038c3660046112d6565b610d13565b600854600090815260026020818152604080842086815592830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155845260049091529091205460038201556005810180548591907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600681111561042557610425611361565b02179055506004818101839055600854336000818152600360209081526040808320859055948152908490205460055485514281529283018990528286015293519192917f9ebec8734c75cc5f2ec46c70bc402f27ca2207d67af71b34a78ed9d211a055889181900360600190a4600880549060006104a38361148e565b919050555050505050565b6000546001600160a01b0316331461050d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610504565b6105ab6000610df5565b565b6000838152600260205260408120600181015481549192916105cf91906114c6565b905060008184116105e057836105e2565b815b6006546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610653573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067791906114dd565b61068057600080fd5b8083600101600082825461069491906114c6565b909155505082546001840154036106ae576106ae86610e5d565b6007546040805160808101825288815260208101888152818301858152336060840190815293517f9a3e4eb8000000000000000000000000000000000000000000000000000000008152925160048401529051602483015251604482015290516001600160a01b03908116606483015290911690639a3e4eb8906084016020604051808303816000875af115801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906114ff565b50505050505050565b6000828152600160205260409081902060095491517f744f4cf60000000000000000000000000000000000000000000000000000000081526004810185905290916001600160a01b03169063744f4cf690602401600060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b50506009546040517f1e0029c800000000000000000000000000000000000000000000000000000000815260048101879052600093506001600160a01b039091169150631e0029c890602401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088691906114ff565b905060008184116108975783610899565b815b9050808360040160008282546108af9190611518565b909155505060065460038401546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018490529116906323b872dd906064016020604051808303816000875af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e91906114dd565b61095757600080fd5b6009546040517f2047a26700000000000000000000000000000000000000000000000000000000815260048101879052602481018390526001600160a01b0390911690632047a26790604401600060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b505050508181036109e5576109e58561118e565b600383015481906001600160a01b0316867fa5429926614dc1f98f159430591aa6b73ddbcbfc1431ec98a7efe706b936747942610a2285886114c6565b6040805192835260208301919091520160405180910390a45050505050565b600081815260016020526040812060050154610100900460ff1680610a755750600082815260016020526040902060020154155b15610a8257506000919050565b6009546040517f1e0029c8000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690631e0029c890602401602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0891906114ff565b92915050565b6007546040517f7c37722300000000000000000000000000000000000000000000000000000000815260048101839052600091829182916001600160a01b031690637c3772239060240160c060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190611540565b8151600090815260016020526040812060808401516004820154949650929450929091610bc5916114c6565b905060008260060154828660400151610bde91906115f7565b610be89190611634565b60048085015460808801526007546040517f7ff241ce0000000000000000000000000000000000000000000000000000000081529293506001600160a01b031691637ff241ce91610c46918b91869101918252602082015260400190565b600060405180830381600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b50506006546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af1158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906114dd565b509695505050505050565b6000546001600160a01b03163314610d6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610504565b6001600160a01b038116610de95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610504565b610df281610df5565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600260205260409020548190610eba5760405162461bcd60e51b815260206004820152601660248201527f5265717565737420646f6573206e6f74206578697374000000000000000000006044820152606401610504565b6000828152600260208181526040808420928301546001600160a01b0316845260038252808420548452600190915290912054158015610f065750600083815260016020526040902054155b610f525760405162461bcd60e51b815260206004820152601c60248201527f557365722068617320616e206f75747374616e64696e67206c6f616e000000006044820152606401610504565b6000838152600160205260409020428082556004830154610f7291611518565b60018083019190915560028083018690558301546003830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055600580840154908301805460ff9092169290917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169083600681111561100757611007611361565b0217905550815460068201556009546005546040517f1ec9f27b000000000000000000000000000000000000000000000000000000008152600481018790526024810182905260448101919091526001600160a01b0390911690631ec9f27b90606401600060405180830381600087803b15801561108457600080fd5b505af1158015611098573d6000803e3d6000fd5b5050600654600285015485546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101919091529116925063a9059cbb91506044016020604051808303816000875af115801561110f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113391906114dd565b50600282015482546040516001600160a01b039092169186917f2b1eb56f9d2886ace1dfc4a1acf6a640b828f3782247397ebf22f6cf09665b7e9161118091428252602082015260400190565b60405180910390a350505050565b60008181526001602052604081206005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905580549091906111d990426114c6565b82549091506000906111eb904261166f565b60038401546001600160a01b03166000908152600460205260409020549091506112169082906116e3565b6003840180546001600160a01b03908116600090815260046020908152604091829020949094559154600687015483514281529485015291830185905260608301849052169085907f5751530710eb6f83af18f5aba63d1721745fa34ea155523a93b06d58aadc3ceb90608001611180565b60008060006060848603121561129d57600080fd5b8335600781106112ac57600080fd5b95602085013595506040909401359392505050565b6001600160a01b0381168114610df257600080fd5b6000602082840312156112e857600080fd5b81356112f3816112c1565b9392505050565b60008060006060848603121561130f57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561133957600080fd5b50508035926020909101359150565b60006020828403121561135a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600781106113c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060c0820190508782528660208301526001600160a01b038616604083015284606083015283608083015261140460a0830184611390565b979650505050505050565b6000610100820190508982528860208301528760408301526001600160a01b038716606083015285608083015261144960a0830186611390565b92151560c082015260e001529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114bf576114bf61145f565b5060010190565b6000828210156114d8576114d861145f565b500390565b6000602082840312156114ef57600080fd5b815180151581146112f357600080fd5b60006020828403121561151157600080fd5b5051919050565b6000821982111561152b5761152b61145f565b500190565b805161153b816112c1565b919050565b60008082840360c081121561155457600080fd5b60a081121561156257600080fd5b5060405160a0810181811067ffffffffffffffff821117156115ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508351815260208401516020820152604084015160408201526060840151606082015260808401516080820152809250506115ee60a08401611530565b90509250929050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561162f5761162f61145f565b500290565b60008261166a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156116a9576116a961145f565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156116dd576116dd61145f565b50500390565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561171d5761171d61145f565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156117515761175161145f565b5050019056fea26469706673582212207cdb4527a9dd2abbf947e3c822e42137474cf77e4ab98aab04179e2fc3d91f2d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12677,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14731,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "loans",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Loan)16334_storage)"
      },
      {
        "astId": 14736,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "requestsById",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(LoanRequest)16348_storage)"
      },
      {
        "astId": 14740,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "requestsByAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14744,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "creditScores",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 14749,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "interestRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14751,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "settlementToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 14753,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "creditToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 14755,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "IDs",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14758,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "interestModule",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(InterestModuleLike)14720"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InterestModuleLike)14720": {
        "encoding": "inplace",
        "label": "contract InterestModuleLike",
        "numberOfBytes": "20"
      },
      "t_enum(LoanPurpose)16311": {
        "encoding": "inplace",
        "label": "enum LoanStructures.LoanPurpose",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Loan)16334_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanStructures.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)16334_storage"
      },
      "t_mapping(t_uint256,t_struct(LoanRequest)16348_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanStructures.LoanRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanRequest)16348_storage"
      },
      "t_struct(Loan)16334_storage": {
        "encoding": "inplace",
        "label": "struct LoanStructures.Loan",
        "members": [
          {
            "astId": 16318,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16320,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16322,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16324,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "borrower",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16326,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "totalPaid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16329,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "purpose",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(LoanPurpose)16311"
          },
          {
            "astId": 16331,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "closed",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 16333,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(LoanRequest)16348_storage": {
        "encoding": "inplace",
        "label": "struct LoanStructures.LoanRequest",
        "members": [
          {
            "astId": 16336,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16338,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "amountFilled",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16340,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "borrower",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16342,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "creditScore",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 16344,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16347,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "purpose",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(LoanPurpose)16311"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}